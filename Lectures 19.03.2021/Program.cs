using System;

namespace Lectures_19._03._2021
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
                ЛЕКЦИЯ 3. Массив -  это структура данных, содержащая несколько переменных, доступ к которым осуществляется по вычисляемым индексам. Содержащиеся в массиве переменные, также 
                называемые элементьами имеют одинаковый тип. Он называется типом элементов массива. Он выглядит как объявление массива с типом ИНТ, который содержит числа 1,2,3.

                int[] array = { 1, 2, 3 };
                // У масива может быть одно или нескольо измерений. Одномерный массив - это подобие списка, двумерный - матрица и так далее. Число измерений задается при объявлении массива с помощью запятых.
                //Если запятых нет то массив плоский (имеет одно измерение), если одна -двумерный, и так далее. Объявление двумерного массива выглядит так:

                int[,] array1 = new int[10, 5];
                //А трехмерного так:

                int[,,] array2 = new int[10, 5, 2];

                //Тип массива может быть любым, даже другим массивом. Такие массивы называют массивами массивов - каждый элемент массива также в свою очередь является массивом.Объявление массива массивов ИНТ выглядит так

                int[][] a = new int[3][];

                //Здесь int[] задает тип - массив int, а вторая пара квадратных скобок, как и прежде, обозначает массив. Чтобы прочитать и записать значение элементов массива используют его специальное свойство
                // - ИНДЕКСАТОР. Позиция элементов в массиве называется индексом. Индексы начинаются с нуля. 
                //Операция чтения элемента с индексом 2 выглядит так:

                int[] array4 = { 10, 5, 2 };
                Console.WriteLine(array4[0]);//10

                //Операция присвоения значения элемента массива выглядит так:

                int[] array3 = { 1, 5, 6, 7 };
                array3[0] = 4; //4,5,6,7

                //Для массива массивов перед чтением/записью необходимо убедиться, что элементы массива тоже инициализированы:

                int[][] b = new int[3][];
                b[0] = new int[3];
                b[1] = new int[3];
                b[2] = new int[3];

                int b00 = b[0][0];
                //a[1][1] = 1;
                //В случае с многомерными массивами присвоение выглядит так: 

                int[,] matrix = new int[5, 5];
                matrix[2, 2] = 1;

                //ВНИМАНИЕ! Так как при расположении в памяти элементы массива не связаны между собой ссылками, а просто расположены подряд, изменение размера массива невозможно.
                // В таких случаях нужно создать новый массив большего размера и скопировать в него значение из старого массива.


                //ЦИКЛ FOR
                // Для перебора элементов массива, стения и записи его элементов существуют специальные операторы - циклы. Циклы позволяют выполнять один и тот же набор операций со всеми 
                // элементами массива до тех пор, пока выполняется условие, указанное  в объявлении цикла.
                // Рассмотрим цикл for и принцип его работы.


                int[] array5 = { 1, 2, 3, 9, 15 };

                for (int i = 0; i < 5; i++)
                // Инициализатор; Условие; Итератор.
                { Console.WriteLine(array5[i]); }

                // Как правило, объявление цикла содержит три раздела: инициализатора, условие и итератора.
                //Каждый из этих разделов - необязательный. Но в большинстве случаев они присутствуют в описании цикла и разделены точкой с запятой:
                //Раздел инициализатора выполняется перед первой итерацией цикла. Раздел условие проверяется перед каждой итерацией. Раздел итератора выполняется перед каждой итарацией.
                //В разделе инициализатора объявляются переменные, которые будут доступны в описании цикла и в его теле. Переменные объявляются через запятую. 

                for (int i = 0, j = 0; i < array.Length; i++) ;
                // Обратите внимание, что  в инициализаторе можно объявить переменные только одного и того же типа. Если необходимо объявить несколько переменных разного типа, это нужно сделать
                // до объявления цикла. В разделе условия указано выражение, при истинности которого цикл продолжает свое выполнение. Если условие не указано явно то будет использоваться значение 
                //true и цикл будет выполняться бесконечно. В случае перебора элементов массива необходимо проверять что текущий индекс  не выходит за пределы массива. В противном случае
                // выполнение цикла приведет к ошибке времени выполнения.
                //В разделе  итератора объявляются выражения, которые будут  выполняться после каждой  итерации цикла. Обычно в этом разделе производят инкремент переменных цикла. 
                //Для получения длины массива следует использовать свойство Length, а в случае с многомерными массивами - метод GetLength с указанием измерения:

                */

            int[,] matrix1 = new int[5, 5];

            matrix1[2, 2] = 1;

            for (int i = 0; i < matrix1.GetLength(0); i++)
            {
                for (int j = 0; j < matrix1.GetLength(1); j++)
                {
                    System.Console.Write($"{matrix1[i, j]} ");
                }
                System.Console.WriteLine();
            }

            //00000
            //00000
            //00100
            //00000
            //00000


            //ЦИКЛЫ с ПРЕД - И ПОСТУСЛОВИЕМ
            //C# предоставляет циклы с предусловием и циклы с постусловием. 
            //Циклы с предусловием сначала проверяют истинность условия и только после этого выполняют очередную итерацию. 
            //Циклы с предусловием сначала выполняют очередную итерации и только потом проверяют условие на истинность. 
            //Это означает, что циклы с предусловием могут не выполнить ни одной итерации, а циклы с постусловием точно выполнят хотя бы одну.

            //while
            //Цикл while — цикл с предусловием.Описание цикла содержит только один раздел — раздел условий:
            /*
            int a2 = 5;
            while (a2 < 10)
            {
                Console.WriteLine(a2);
                a2++;
            }


            //Чтобы цикл имел возможность корректно завершиться, в теле цикла следует позаботиться об инкременте необходимых переменных.
            //Если из тела цикла, описанного выше, убрать инкремент переменной n, условие n < 0 всегда будет верным и цикл никогда не завершится. 
            //В программировании существуют задачи, подразумевающие использование бесконечных циклов(их также называют безусловными циклами).
            //Мы рассмотрим пример с безусловным циклом далее в этом разделе.
            // do -while
            // Цикл do -while схож с циклом while, но, в отличие от него, это цикл с постусловием.
            //Этот пример кода выводит на экран числа от 0 до 5 так же, как и пример с использованием цикла while:

            int n = 0;
            do
            {
                Console.WriteLine(n);
                n++;
            } while (n < 5);


            //На примере итерации по массива вывод обоих циклов будет одинаковый. Но на практике в зависимости от поставленной задачи используется тот или иной цикл. 
            //Стоит отметить, что для итерации удобнее использовать цикл for, 
            //циклы do-while и while в первую очередь предназначены на повторение итераций до тех пор, пока заданное условие выполняется
            //Рассмотрим возможные сценарии использования обоих циклов.

            //Сценарии использования циклов while и do -while
            //Безусловный цикл
            //Безусловный цикл представляет собой набор операций, выполняющихся бесконечно до тех пор, пока работа программы не будет завершена принудительно.
            //Для написания безусловного цикла подойдет любой из циклов do -while, while, но на практике применяют цикл while.
            //Такой код будет бесконечно опрашивать пользователя и выводить на экран введенную строку:


            while (true)
            {
                string fenix = Console.ReadLine();
                Console.WriteLine(fenix);
            }

            //На практике безусловный цикл применяется в тех случаях, когда условие выхода из цикла не может быть вычислено на момент объявления самого цикла. 
            //Этот код конвертирует пользовательский ввод в число и выводит результат деления на консоль.
            //В случае, если пользователь ввел ноль, нам необходимо завершить работу программы:


            while (true)
            {
                string input = Console.ReadLine();
                double number = Convert.ToDouble(input);
                if (number == 0)
                {
                    return;
                }
                Console.WriteLine(1 / number);
            }
            //Чаще всего безусловный цикл используется в веб-сервисах и системных службах — они обрабатывают поступившие к ним запросы до тех пор, пока не получат запрос на завершение работы.
            //Также безусловный цикл может найти применение в разработке игр: мы постоянно выводим новый кадр игры на экран до тех пор, пока пользователь не выберет завершение игры.

            //Пример использования цикла с ПОСТУСЛОВИЕМ.
            //Циклы с постусловием хорошо подходят для ситуаций, когда нам нужно повторять одни и те же операции, пока нужное нам условие не станет верным, например, до тех пор, пока пользователь не введёт пароль определённой длины и не подтвердит его:
            */
            string password;
            do
            {
                Console.WriteLine("Задайте пароль длиной не менее 5 знаков");
                password = Console.ReadLine();
            } while (password.Length < 5);

            string repeatedPassword;
            do
            {
                Console.WriteLine("Повторите пароль:");
                repeatedPassword = Console.ReadLine();
            } while (repeatedPassword != password);

            Console.WriteLine("Пароль успешно установлен");
            //Обратите внимание на то, как записаны условия в этих циклах: они содержат условия, выполнение которых мы хотим прекратить.
            //До тех пор, пока они выполняются, выполняются и циклы do -while.Если условия перестают выполняться, значит, введенные пользователем данные удовлетворяют нашим условиям.

            //Оператор break
            // Ранее мы рассматривали завершение программы оператором return, но нам также доступна возможность прерывания цикла и возврат в родительский блок программы.Оператор break

            

        }
 

    }
}
